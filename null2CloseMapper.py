from operator import itemgetter
from statistics import mean

from pandas import isnull
from read_data_functions import *
from storeSelector import closer_stores, store_sales_cal

"""
Mapping the null values in the outputs generated by taking into consideration similar stores nearby.
Similary is based on the Average Sales of store and standard deviation w.r.t to the given store

"""
def null_mapper():
    outputData = get_pickled_data_frame("weightedWindowLT2")
    trainData = get_pickled_data_frame("train")
    outputDataNulls = outputData[isnull(outputData.Weekly_Sales)]
    allStoreList = list(range(1,46))
    storeNumList = []
    for index,record in outputDataNulls.iterrows():
        storeNumList.append(record["Store"])

    storeNumList = list(set(storeNumList))
    for storeNum in storeNumList:
        print(storeNum)
        #closerStoreList = closer_stores(storeNum)
        closerStoreList = allStoreList
        storeDeptNumList = []

        for index,record in outputDataNulls[outputDataNulls["Store"]==storeNum].iterrows():
            storeDeptNumList.append(record["Dept"])

        storeDeptNumList = list(set(storeDeptNumList))

        for deptNum in storeDeptNumList:

            for index,record in outputDataNulls[(outputDataNulls["Store"]==storeNum) & (outputDataNulls["Dept"]==deptNum)].iterrows():
                currStore = record["Store"]
                currDept = record["Dept"]
                currWeek = record["WeekNum"]
                currDeptSales = store_sales_cal(currStore,currDept)
                closerStoreSalesList = []

                for store in closerStoreList:
                    closerStoreSalesList.append([store,abs(store_sales_cal(store,currDept)-currDeptSales)])
                closerStoreSalesList = sorted(closerStoreSalesList, key = itemgetter(1))

                for store in closerStoreSalesList:
                    weeklySalesList = trainData[(trainData["Store"] == store[0]) &(trainData["Dept"] == currDept) & (trainData["WeekNum"] - currWeek < 2)].Weekly_Sales
                    #print(weeklySalesList)
                    if weeklySalesList.count() == 0:
                        pass
                    else:
                        weeklySalesMean = mean(weeklySalesList)
                        break
                tempIndex = outputData[(outputData["Store"]==record["Store"])&(outputData["Dept"]==record["Dept"])&(outputData["WeekNum"]==record["WeekNum"])].index.tolist()
                outputData.set_value(tempIndex,"Weekly_Sales",weeklySalesMean)
    pickle_data_frame("tempWLT2outputData",outputData)
    outputData.to_csv("outputdatatempWLT2.csv")

null_mapper()